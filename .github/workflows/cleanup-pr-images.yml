name: Cleanup PR Docker Images

on:
  # Run on PR close
  pull_request:
    types: [closed]
  
  # Run on schedule to clean up old images
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (do not delete images)'
        required: false
        default: 'true'
      days_to_keep:
        description: 'Keep images newer than this many days'
        required: false
        default: '0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  cleanup-pr-images:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Cleanup on PR close - delete images specific to this PR
      - name: Delete PR-specific images
        if: github.event_name == 'pull_request'
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Cleaning up images for closed PR #${PR_NUMBER}"
          
          # Get all versions for this package
          REPO_OWNER="${{ github.repository_owner }}"
          PACKAGE_NAME="${{ github.event.repository.name }}"
          
          # Check if package exists and get versions
          echo "Checking for package versions..."
          
          # Try user packages first (personal repos), then org packages
          VERSIONS_JSON=""
          if VERSIONS_JSON=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/users/${REPO_OWNER}/packages/container/${PACKAGE_NAME}/versions" \
            --paginate 2>/dev/null); then
            echo "Found package under user account"
            API_BASE="/users/${REPO_OWNER}/packages/container/${PACKAGE_NAME}/versions"
          elif VERSIONS_JSON=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/orgs/${REPO_OWNER}/packages/container/${PACKAGE_NAME}/versions" \
            --paginate 2>/dev/null); then
            echo "Found package under organization"
            API_BASE="/orgs/${REPO_OWNER}/packages/container/${PACKAGE_NAME}/versions"
          else
            echo "No package found or no access to package registry"
            echo "This could be because:"
            echo "1. No Docker images have been pushed yet"
            echo "2. Package name doesn't match repository name"
            echo "3. Package is private and lacks permissions"
            exit 0
          fi
          
          # Find versions with PR tag
          PR_TAG="pr-${PR_NUMBER}"
          echo "Searching for versions with tag: ${PR_TAG}"
          
          # Debug: Show raw JSON response
          echo "Debug: Raw API response:"
          echo "$VERSIONS_JSON" | jq '.' 2>/dev/null || echo "Failed to parse JSON: $VERSIONS_JSON"
          
          # Extract version IDs for this PR (ensure we get integers)
          echo "Debug: Searching for tags containing: $PR_TAG"
          VERSION_IDS=$(echo "$VERSIONS_JSON" | jq -r --arg pr_tag "$PR_TAG" '
            .[] | 
            select(.metadata.container.tags[]? | contains($pr_tag)) | 
            "\(.id) (tags: \(.metadata.container.tags | join(",")))"
          ' 2>/dev/null || echo "")
          
          echo "Debug: Found matching versions:"
          echo "$VERSION_IDS"
          
          # Extract just the IDs (integers only)
          CLEAN_VERSION_IDS=$(echo "$VERSION_IDS" | grep -oE '^[0-9]+' || true)
          
          if [[ -z "$CLEAN_VERSION_IDS" ]]; then
            echo "No images found with PR tag: ${PR_TAG}"
            echo "Available tags:"
            echo "$VERSIONS_JSON" | jq -r '.[] | .metadata.container.tags[]?' 2>/dev/null | sort | uniq | head -10 || echo "No tags found"
            exit 0
          fi
          
          echo "Found $(echo "$CLEAN_VERSION_IDS" | wc -w) version(s) to delete:"
          echo "$CLEAN_VERSION_IDS"
          
          # Delete each version
          for VERSION_ID in $CLEAN_VERSION_IDS; do
            if [[ -n "$VERSION_ID" && "$VERSION_ID" =~ ^[0-9]+$ ]]; then
              echo "Deleting version ID: ${VERSION_ID}"
              if gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "${API_BASE}/${VERSION_ID}" 2>/dev/null; then
                echo "✓ Successfully deleted version ${VERSION_ID}"
              else
                echo "✗ Failed to delete version ${VERSION_ID} (may have been already deleted)"
              fi
            else
              echo "⚠️ Skipping invalid version ID: ${VERSION_ID}"
            fi
          done
          
          echo "PR image cleanup completed"

      # Scheduled/manual cleanup - delete old images (keep only today's)
      - name: Delete old images (except main and tagged)
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        env:
          DAYS_TO_KEEP: ${{ github.event.inputs.days_to_keep || '0' }}
          # For scheduled runs, default to actual deletion. For manual runs, use input (defaults to true)
          DRY_RUN: ${{ github.event_name == 'schedule' && 'false' || github.event.inputs.dry_run || 'true' }}
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "============================================"
          echo "Cleanup Configuration:"
          echo "  - Days to keep: ${DAYS_TO_KEEP}"
          echo "  - Dry run: ${DRY_RUN}"
          echo "============================================"
          
          # Calculate cutoff date
          if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            CUTOFF_DATE=$(date -v-${DAYS_TO_KEEP}d -u +"%Y-%m-%dT%H:%M:%SZ")
          else
            # Linux
            CUTOFF_DATE=$(date -u -d "${DAYS_TO_KEEP} days ago" +"%Y-%m-%dT%H:%M:%SZ")
          fi
          
          echo "Cutoff date: ${CUTOFF_DATE}"
          echo "Current date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "Will delete all images created before ${CUTOFF_DATE}"
          echo "Will also delete all untagged manifests (intermediate layers)"
          echo "Will preserve: main, latest, and version tags (v*)"
          echo ""
          
          # Get all versions
          REPO_OWNER="${{ github.repository_owner }}"
          PACKAGE_NAME="${{ github.event.repository.name }}"
          
          VERSIONS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/orgs/${REPO_OWNER}/packages/container/${PACKAGE_NAME}/versions" \
            --paginate \
            --jq '.[]' 2>/dev/null || \
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/users/${REPO_OWNER}/packages/container/${PACKAGE_NAME}/versions" \
            --paginate \
            --jq '.[]')
          
          # Process each version
          ACTIONS_LOG=""
          DELETE_LIST=""
          KEEP_LIST=""
          
          while IFS= read -r VERSION; do
            VERSION_ID=$(echo "$VERSION" | jq -r '.id')
            CREATED_AT=$(echo "$VERSION" | jq -r '.created_at')
            TAGS=$(echo "$VERSION" | jq -r '.metadata.container.tags[]' 2>/dev/null || echo "")
            
            # Create a tags array for easier checking
            TAG_LIST=""
            for TAG in $TAGS; do
              TAG_LIST="${TAG_LIST} ${TAG}"
            done
            
            # Check if it has protected tags (latest, main, or version tags)
            PROTECTED=false
            for TAG in $TAGS; do
              if [[ "$TAG" == "latest" ]] || [[ "$TAG" == "main" ]] || [[ "$TAG" =~ ^v[0-9] ]]; then
                PROTECTED=true
                break
              fi
            done
            
            if [[ "$PROTECTED" == "true" ]]; then
              echo "✓ KEEPING version ${VERSION_ID} - Protected tags: ${TAG_LIST}"
              KEEP_LIST="${KEEP_LIST}${VERSION_ID}\n"
              continue
            fi
            
            # Check if older than cutoff OR untagged (delete all non-protected images older than cutoff, plus untagged)
            if [[ "$CREATED_AT" < "$CUTOFF_DATE" ]] || [[ -z "$TAGS" ]]; then
              echo "✗ DELETING version ${VERSION_ID} - Created: ${CREATED_AT}, Tags: ${TAG_LIST}"
              DELETE_LIST="${DELETE_LIST}${VERSION_ID}\n"
              
              if [[ "${DRY_RUN}" != "true" ]]; then
                gh api \
                  --method DELETE \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "/orgs/${REPO_OWNER}/packages/container/${PACKAGE_NAME}/versions/${VERSION_ID}" || \
                gh api \
                  --method DELETE \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "/users/${REPO_OWNER}/packages/container/${PACKAGE_NAME}/versions/${VERSION_ID}" || true
              else
                echo "  [DRY RUN] Would delete this version"
              fi
            else
              echo "✓ KEEPING version ${VERSION_ID} - Recent (${CREATED_AT}), Tags: ${TAG_LIST}"
              KEEP_LIST="${KEEP_LIST}${VERSION_ID}\n"
            fi
          done <<< "$VERSIONS"
          
          # Count the results
          DELETE_COUNT=$(echo -e "$DELETE_LIST" | grep -c "^[0-9]" || echo 0)
          SKIP_COUNT=$(echo -e "$KEEP_LIST" | grep -c "^[0-9]" || echo 0)
          
          echo ""
          echo "============================================"
          echo "Summary:"
          echo "  - Images to delete: ${DELETE_COUNT}"
          echo "  - Images to keep: ${SKIP_COUNT}"
          echo "  - Dry run: ${DRY_RUN}"
          echo "============================================"

      # Report on remaining images
      - name: Report remaining images
        if: always()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "## Container Registry Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Set variables
          REPO_OWNER="${{ github.repository_owner }}"
          PACKAGE_NAME="${{ github.event.repository.name }}"
          
          # Get current package versions
          VERSIONS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/orgs/${REPO_OWNER}/packages/container/${PACKAGE_NAME}/versions" \
            --paginate 2>/dev/null || \
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/users/${REPO_OWNER}/packages/container/${PACKAGE_NAME}/versions" \
            --paginate)
          
          TOTAL_COUNT=$(echo "$VERSIONS" | jq '. | length')
          PROTECTED_COUNT=$(echo "$VERSIONS" | jq '[.[] | select(.metadata.container.tags[] | test("^(latest|main|v[0-9])"))] | length')
          PR_COUNT=$(echo "$VERSIONS" | jq '[.[] | select(.metadata.container.tags[] | test("^pr-"))] | length')
          SHA_COUNT=$(echo "$VERSIONS" | jq '[.[] | select(.metadata.container.tags[] | test("^sha-"))] | length')
          
          echo "### Image Statistics" >> $GITHUB_STEP_SUMMARY
          echo "| Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total images | ${TOTAL_COUNT} |" >> $GITHUB_STEP_SUMMARY
          echo "| Protected (main/latest/versions) | ${PROTECTED_COUNT} |" >> $GITHUB_STEP_SUMMARY
          echo "| PR images | ${PR_COUNT} |" >> $GITHUB_STEP_SUMMARY
          echo "| SHA-tagged images | ${SHA_COUNT} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # List all remaining images grouped by type
          echo "### Protected Images (will never be deleted):" >> $GITHUB_STEP_SUMMARY
          echo "$VERSIONS" | jq -r '.[] | 
            select(.metadata.container.tags[] | test("^(latest|main|v[0-9])")) | 
            "- **\(.metadata.container.tags | join(", "))** (created: \(.created_at))"' >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recent Images (from today):" >> $GITHUB_STEP_SUMMARY
          TODAY=$(date -u +"%Y-%m-%d")
          echo "$VERSIONS" | jq -r --arg today "$TODAY" '.[] | 
            select(.created_at | startswith($today)) | 
            select(.metadata.container.tags[] | test("^(latest|main|v[0-9])") | not) |
            "- \(.metadata.container.tags | join(", ")) (created: \(.created_at))"' >> $GITHUB_STEP_SUMMARY