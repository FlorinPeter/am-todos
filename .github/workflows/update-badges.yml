name: Update Badges

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  update-badges:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    env:
      GIST_ID: ${{ secrets.GIST_ID }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests and capture output
      id: test
      run: |
        # Run tests and capture output
        npm test -- --run --reporter=verbose > test-output.log 2>&1 || true
        
        # Extract test count - look for various patterns
        # Pattern 1: "Tests  123 passed (123)"
        TEST_COUNT=$(grep -oE "Tests[[:space:]]+[0-9]+ passed" test-output.log | grep -oE "[0-9]+" | head -1 || echo "0")
        
        # Pattern 2: "Test Files  X passed | Y passed (Z)"
        if [ -z "$TEST_COUNT" ] || [ "$TEST_COUNT" = "0" ]; then
          TEST_COUNT=$(grep -E "Test Files.*passed.*passed" test-output.log | grep -oE "[0-9]+ passed" | grep -oE "[0-9]+" | tail -1 || echo "0")
        fi
        
        # Pattern 3: Look for total at the end of summary
        if [ -z "$TEST_COUNT" ] || [ "$TEST_COUNT" = "0" ]; then
          TEST_COUNT=$(grep -oE "[0-9]+ passed \([0-9]+\)" test-output.log | grep -oE "\([0-9]+\)" | grep -oE "[0-9]+" | tail -1 || echo "0")
        fi
        
        # Pattern 4: Simple "X tests" pattern
        if [ -z "$TEST_COUNT" ] || [ "$TEST_COUNT" = "0" ]; then
          TEST_COUNT=$(grep -oE "[0-9]+ tests" test-output.log | grep -oE "[0-9]+" | tail -1 || echo "0")
        fi
        
        # Set default if still empty
        if [ -z "$TEST_COUNT" ]; then
          TEST_COUNT="0"
        fi
        
        echo "TEST_COUNT=${TEST_COUNT}" >> $GITHUB_ENV
        echo "Test count extracted: ${TEST_COUNT}"
        
        # Debug: show what we found
        echo "Test extraction debug:"
        grep -E "(Test Files|Tests)" test-output.log | head -3 || echo "No test summary patterns found"
        
    - name: Run coverage
      id: coverage
      run: |
        # Run coverage and capture output
        npm run test:coverage > coverage-output.log 2>&1 || true
        
        # Extract coverage percentage from output
        # Look for pattern like "All files          |   62.95 |"
        COVERAGE=$(grep -E "All files[[:space:]]+\|[[:space:]]+[0-9.]+" coverage-output.log | grep -oE "[0-9]+\.[0-9]+" | head -1 | cut -d. -f1 || echo "0")
        
        # Alternative extraction method if first one fails
        if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "0" ]; then
          COVERAGE=$(grep -A5 "Coverage report" coverage-output.log | grep -E "All files" | grep -oE "[0-9]+\.[0-9]+" | head -1 | cut -d. -f1 || echo "0")
        fi
        
        # Fallback to JSON file if available
        if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "0" ]; then
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct' | cut -d. -f1 || echo "0")
          fi
        fi
        
        # Set default if still empty
        if [ -z "$COVERAGE" ]; then
          COVERAGE="0"
        fi
        
        echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV
        echo "Coverage extracted: ${COVERAGE}%"
        
        # Debug: show what we found
        echo "Coverage extraction debug:"
        grep -E "All files" coverage-output.log || echo "No 'All files' pattern found"

    - name: Create badges JSON
      run: |
        # Create JSON for shields.io endpoint badge
        mkdir -p .github
        
        # Test badge color
        if [ "${{ env.TEST_COUNT }}" == "0" ]; then
          TEST_COLOR="red"
        else
          TEST_COLOR="brightgreen"
        fi
        
        # Coverage badge color
        if [ "${{ env.COVERAGE }}" == "unknown" ]; then
          COVERAGE_COLOR="lightgrey"
        elif [ "${{ env.COVERAGE }}" -ge 80 ]; then
          COVERAGE_COLOR="brightgreen"
        elif [ "${{ env.COVERAGE }}" -ge 60 ]; then
          COVERAGE_COLOR="yellow"
        else
          COVERAGE_COLOR="red"
        fi
        
        # Create JSON for shields.io
        cat > .github/test-badge.json << EOF
        {
          "schemaVersion": 1,
          "label": "tests",
          "message": "${{ env.TEST_COUNT }} passing",
          "color": "${TEST_COLOR}"
        }
        EOF
        
        # Format coverage message
        if [ "${{ env.COVERAGE }}" == "0" ] || [ "${{ env.COVERAGE }}" == "" ]; then
          COVERAGE_MSG="unknown"
        else
          COVERAGE_MSG="${{ env.COVERAGE }}%"
        fi
        
        cat > .github/coverage-badge.json << EOF
        {
          "schemaVersion": 1,
          "label": "coverage",
          "message": "${COVERAGE_MSG}",
          "color": "${COVERAGE_COLOR}"
        }
        EOF
        
    - name: Update Gist
      if: ${{ env.GIST_ID != '' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ env.GIST_ID }}
        filename: am-todos-tests.json
        label: tests
        message: ${{ env.TEST_COUNT }} passing
        color: ${{ env.TEST_COUNT == '0' && 'red' || 'brightgreen' }}
        
    - name: Update Coverage Gist
      if: ${{ env.GIST_ID != '' }}
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ env.GIST_ID }}
        filename: am-todos-coverage.json
        label: coverage
        message: ${{ env.COVERAGE }}%
        color: ${{ env.COVERAGE == 'unknown' && 'lightgrey' || env.COVERAGE >= 80 && 'brightgreen' || env.COVERAGE >= 60 && 'yellow' || 'red' }}

    - name: Commit badge data to branch
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create orphan badges branch
        git checkout --orphan badges-temp
        
        # Remove all files
        git rm -rf . || true
        
        # Copy only badge files
        cp .github/test-badge.json test-badge.json
        cp .github/coverage-badge.json coverage-badge.json
        
        # Commit and push
        git add test-badge.json coverage-badge.json
        git commit -m "Update badge data [skip ci]"
        
        # Force push to badges branch
        git branch -D badges || true
        git branch -m badges
        git push origin badges --force